;; -*- mode: fennel; -*- vi:ft=fennel

;;; Project variables

(local (MAJOR MINOR PATCH)
  (values "0" "1"))

(local compile-opts
  {:requireAsInclude true
   :metadata true
   :skipInclude [:socket :ltn12 :reduced]})

(local main-file "src/io/gitlab/andreyorst/fnl-http/init.fnl")
(local out-file "src/io/gitlab/andreyorst/fnl-http/init.lua")

(local fennel
  (require :fennel))

(doto fennel
  (tset :path (.. "./src/?.fnl;" fennel.path))
  (tset :path (.. "./lib/?.fnl;" fennel.path)))

;;; Helper functions

(fn rev-count []
  (with-open [f (io.popen "git -C . rev-list HEAD --count")]
    (f:read)))

(fn prepare-source [file]
  "Reads the given `file` and patches the version."
  (with-open [file (io.open file :r)]
    (-> (file:read :*a)
        (string.gsub
         ":__VERSION :dev"
         (string.format ":__VERSION \"%s.%s.%s\"" MAJOR MINOR (rev-count))))))

(fn compile [source]
  "Compiles the `source` string into Lua."
  (case (xpcall fennel.compile-string fennel.traceback source compile-opts)
    (true lua-src) lua-src
    (_ ?message) (do (io.stderr:write (or ?message "unknown error") "\n")
                     (os.exit 1))))

(fn write [lua-source out]
  "Writes the `lua-source` string into the `out` file."
  (with-open [out (io.open out :w)]
    (out:write lua-source)))

;;; Build process

(-> main-file
    prepare-source
    compile
    (write out-file))
