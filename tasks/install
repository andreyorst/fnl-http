;; -*- mode: fennel; -*- vi:ft=fennel

;;; project variables

(local source-file
  "src/io/gitlab/andreyorst/fnl-http/init.lua")

(local target
  ["target" "io" "gitlab" "andreyorst"])

(local bundled-libraries
  [["io" "gitlab" "andreyorst" "async.fnl"]
   ["io" "gitlab" "andreyorst" "reader.fnl"]
   ["io" "gitlab" "andreyorst" "json.fnl"]])

;;; install script

(local fs
  (case (pcall require :lfs)
    (true lfs) lfs
    _ (error "install task requires the luafilesystem dependency")))

(local project-root (fs.currentdir))
(local unpack (or _G.unpack table.unpack))
(local numargs (select :# (unpack arg)))
(var prefix (os.getenv "PREFIX"))

(when (> numargs 1)
  (for [i 1 numargs]
    (case (. arg i)
      "--prefix" (set prefix (. arg (+ i 1))))))

(when prefix
  (tset target 1 prefix))

(when (not (fs.attributes source-file))
  (os.execute "fennel tasks/compile"))

(local source
  (with-open [src (io.open source-file :r)]
    (src:read :*a)))

(local path-sep (string.sub package.config 1 1))

(fn create-dirs [path]
  (let [current-dir (fs.currentdir)]
    (each [_ dir (ipairs path)]
      (case (fs.mkdir dir)
        true nil
        (nil _ 17) nil
        (_ ?err ?code)
        (error (string.format "error code %s: %s"
                              (or ?code "unknwon")
                              (or ?err "unknown error"))))
      (case (fs.chdir dir)
        true nil
        (_ ?err) (error (.. "error: " (or ?err "unknown error")))))
    (fs.chdir current-dir)))

(create-dirs target)

(with-open [out (io.open (.. (table.concat target path-sep) path-sep "fnl-http.lua") :w)]
  (case out
    out (out:write source)
    nil (error (.. "can't open " source-file " for writing"))))

(each [_ lib-path (ipairs bundled-libraries)]
  (let [out-path (doto (fcollect [i 1 (- (length lib-path) 1)] (. lib-path i))
                   (table.insert 1 (. target 1)))
        lib-name (. lib-path (length lib-path))]
    (create-dirs out-path)
    (with-open [lib (io.open (.. "lib" path-sep (table.concat lib-path path-sep)) :r)
                out (io.open (.. (table.concat out-path path-sep) path-sep lib-name) :w)]
      (case (values lib out)
        (lib out) (out:write (lib:read :*a))
        (nil _) (error (.. "can't open " (table.concat lib-path path-sep) " for reading"))
        (_ nil) (error (.. "can't open " (.. (table.concat out-path path-sep) path-sep lib-name) " for writing"))))))
