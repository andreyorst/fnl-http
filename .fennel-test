;; -*- mode: fennel -*-

(fn ansi [d]
  (string.format "[%dm" d))

(local colors
  {:ash (ansi 90)
   :orange (ansi 91)
   :salad (ansi 92)
   :lemon (ansi 33)
   :aubergine (ansi 95)
   :hydrangea (ansi 36)})

(local styles
  {:bold (ansi 1)})

(local colorize?
  (case (os.getenv "NO_COLOR")
    val false
    _ true))

(fn colorize [text color style]
  (if colorize?
      (string.format
       "%s%s%s[0m"
       (or (. colors color) "")
       (or (. styles style) "")
       text)
      text))

(fn pad [n total]
  (-> (case (values n total)
        nil "â”‚"
        (1 1) "â•¾â”€ "
        (1 _) "â”Œâ”€ "
        (total total) "â””â”€ "
        _ "â”œâ”€ ")
      (colorize :ash)))

(fn perc-diff [total val]
  (* (/ val total) 100))

(fn report-longest-namespaces [test-times total-time]
  (when (next test-times)
    (let [[ns-times ns-counts]
          (accumulate [[ns-times ns-counts] [{} {}]
                       [ns] time (pairs test-times)]
            [(if (. ns-times ns)
                 (doto ns-times (tset ns (+ (. ns-times ns) time)))
                 (doto ns-times (tset ns time)))
             (if (. ns-counts ns)
                 (doto ns-counts (tset ns (+ (. ns-counts ns) 1)))
                 (doto ns-counts (tset ns 1)))])
          sorted (doto (icollect [k v (pairs ns-times)] [k v])
                   (table.sort (fn [[_ t1] [_ t2]] (> t1 t2))))
          top-3 (icollect [i [name time] (ipairs sorted) :until (= i 4)] [name time])
          top-3-total (accumulate [total 0 _ [_ time] (ipairs top-3)] (+ total time))
          averages (collect [_ [ns time] (ipairs top-3)]
                     ns (/ time (. ns-counts ns)))]
      (io.write (string.format "\nTop 3 slowest namespaces (%0.4f seconds, %0.2f%% of total time)\n"
                               top-3-total (perc-diff total-time top-3-total)))
      (each [_ [ns time] (ipairs top-3)]
        (io.write (string.format "  %s\n    %s average (%0.4f seconds / %d tests)\n"
                                 (colorize ns :aubergine)
                                 (colorize (string.format "%0.4f seconds" (. averages ns)) nil :bold)
                                 time
                                 (. ns-counts ns)))))))

(fn report-longest-tests [test-times total-time]
  (when (next test-times)
    (let [sorted (doto (icollect [k v (pairs test-times)] [k v])
                   (table.sort (fn [[_ t1] [_ t2]] (> t1 t2))))
          top-3 (icollect [i [name time] (ipairs sorted) :until (= i 4)] [name time])
          top-3-total (accumulate [total 0 _ [_ time] (ipairs top-3)] (+ total time))]
      (io.write (string.format "\nTop 3 slowest tests (%0.4f seconds, %0.2f%% of total time)\n"
                               top-3-total (perc-diff total-time top-3-total)))
      (each [_ [[ns name] time] (ipairs top-3)]
        (io.write (string.format "  %s/%s took %s\n"
                                 (colorize ns :aubergine) (colorize name :hydrangea)
                                 (colorize (string.format "%0.4f seconds" time) nil :bold)))))))

(local reporter
  {:ns-start (fn [ns] (io.write
                       (string.format
                        "\n%sRunning tests in %s\n"
                        (pad 1 nil)
                        (colorize ns :aubergine))))
   :ns-report (fn [_ ok?] (io.write
                           (string.format
                            "%s%s\n"
                            (pad 2 2)
                            (case ok?
                              true (colorize "PASS" :salad)
                              :warn (colorize "WARN" :lemon)
                              :skip (colorize "SKIP" :lemon)
                              _ (colorize "FAIL" :orange)))))
   :test-start (fn [_ test-name n total]
                 (io.write (string.format "%s%s%s: " (pad) (pad n total) (colorize test-name :hydrangea)))
                 (io.flush))
   :test-report (fn [ok? _ _ msg]
                  (io.write
                   (string.format
                    "%s\n"
                    (case ok?
                      true (colorize "PASS" :salad)
                      :skip (colorize "SKIP" :lemon)
                      :warn (colorize "WARN" :lemon)
                      _ (colorize "FAIL" :orange)))))
   :stats-report (fn [warnings errors skipped-tests assertions total-tests test-times]
                   (let [total-time
                         (accumulate [total-time 0 _ time (pairs test-times)]
                           (+ total-time time))]
                     (io.write (string.format "\nRan %d tests in %0.4f seconds with %d assertions, %d skipped, %d warnings, %d errors\n"
                                              total-tests total-time assertions (length skipped-tests) (length warnings) (length errors)))
                     (when (next warnings)
                       (io.stderr:write "\n"))
                     (each [_ message (ipairs warnings)]
                       (io.stderr:write (colorize "Warning" :lemon) ": " message "\n"))
                     (when (next skipped-tests)
                       (io.stderr:write "\n"))
                     (each [_ {: ns : test-name : message} (ipairs skipped-tests)]
                       (io.stderr:write
                        (if test-name
                            (string.format "Skipped %s/%s test%s\n"
                                           (colorize ns :aubergine) (colorize test-name :hydrangea)
                                           (if message (.. ": " message) ""))
                            (string.format "Skipped %s tests%s\n"
                                           (colorize ns :aubergine)
                                           (if message (.. ": " message) "")))))
                     (when (next errors)
                       (io.stderr:write "\n"))
                     (each [_ {: ns : test-name : message : stdout : stderr} (ipairs errors)]
                       (io.stderr:write
                        (string.format "%s in %s/%s:\n%s\n"
                                       (colorize "Error" :orange)
                                       (colorize ns :aubergine) (colorize test-name :hydrangea)
                                       message))
                       (when (not= "" stdout)
                         (io.stderr:write
                          (colorize "Test stdout:\n" :ash)
                          stdout))
                       (when (not= "" stderr)
                         (io.stderr:write
                          (colorize "Test stderr:\n" :ash)
                          stderr)))
                     (report-longest-namespaces test-times total-time)
                     (report-longest-tests test-times total-time)
                     (if (> (length errors) 0)
                         (io.write (colorize "\nTest failure\n" :orange))
                         (io.write (colorize "\nTest passed\n" :salad)))))})

{: reporter}
